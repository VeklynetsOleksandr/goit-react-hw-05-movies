{"version":3,"file":"static/js/881.f695f1f0.chunk.js","mappings":"sPACA,GAAgB,KAAO,qBAAqB,OAAS,uBAAuB,MAAQ,uB,4CCKrE,SAASA,IACxB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,OAEhBC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAe,IAAIC,gBAAgBN,EAASO,QAAQC,IAAI,SAE9D,GAAIH,EAAc,CACd,IAAMI,EAAS,mCAAG,uGACYC,EAAAA,EAAAA,IAAaL,GADzB,gBAGS,KAFfM,EADM,EACNA,SAEIC,QACRC,IAAAA,OAAAA,QAAwB,uEAG5Bd,EAAUY,GAPI,2CAAH,qDAUfF,GACH,CACJ,GAAE,CAACT,EAASO,SAEb,IAAMO,EAAY,mCAAG,WAAMC,GAAN,yEACjBA,EAAEC,iBACIX,EAAe,IAAIC,gBAAgBN,EAASO,QAAQC,IAAI,WAExDS,EAAQrB,EAAYsB,SAEbD,IAAUZ,IAEnBH,GAAQ,kBACDF,GADA,IAEHO,OAAO,SAAD,OAAWU,MAVR,2CAAH,sDAelB,OACI,iCACI,mBAAQE,UAAWC,EAAAA,UAAnB,UACI,kBAAMD,UAAWC,EAAAA,KAAYC,SAAUP,EAAvC,WACA,kBACIQ,SAAU,SAAAP,GAAC,OAAIlB,EAAekB,EAAEQ,OAAOC,MAA5B,EACXL,UAAWC,EAAAA,MACXK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZJ,MAAO5B,KAEX,mBAAQ6B,KAAK,SAASN,UAAWC,EAAAA,OAAjC,gCAKJ,wBACCtB,EAAOc,OAAS,GACbd,EAAO+B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,EAAcC,YAAd,OAEP,eAAaF,GAAIA,EAAjB,UACA,SAAC,KAAD,CACIG,GAAI,CACJC,SAAS,WAAD,iBAAgBJ,IACxBK,MAAO,CACHC,KAAM,CACNpC,SAAAA,KALR,UAUI,uBAAI+B,OAXCD,EAFF,QAqBtB,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Movies_form__4ow+Z\",\"button\":\"Movies_button__GcIka\",\"input\":\"Movies_input__KrUqs\"};","import Notiflix from 'notiflix';\nimport style from './Movies.module.css'\nimport { useState, useEffect } from 'react';\nimport { searchMovies } from '../../shared/Api/Api';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\n\nexport default function Movies() {\nconst [movieToFind, setMovieToFind] = useState('');\nconst [movies, setMovies] = useState([]);\n\nconst location = useLocation();\nconst history = useNavigate();\n\nuseEffect(() => {\n    const searchString = new URLSearchParams(location.search).get('query');\n\n    if (searchString) {\n        const getMovies = async () => {\n            const { results } = await searchMovies(searchString);\n\n            if (results.length === 0) {\n                Notiflix.Notify.failure('We did not found anything! Please change your request and try again');\n        }\n\n            setMovies(results);   \n        };\n\n        getMovies();\n    }\n}, [location.search]);\n\nconst handleSubmit = async e => {\n    e.preventDefault();\n    const searchString = new URLSearchParams(location.search).get('query');\n\n    const query = movieToFind.trim();\n\n    if (query || query !== searchString) {\n     \n        history({\n            ...location,\n            search: `query=${query}`,\n        });\n    }\n};\n\nreturn (\n    <>\n        <header className={style.searchbar}>\n            <form className={style.form} onSubmit={handleSubmit}>\n            <input\n                onChange={e => setMovieToFind(e.target.value)}\n                className={style.input}\n                type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movie\"\n                value={movieToFind}\n            />\n            <button type=\"submit\" className={style.button}>\n            &#128269;\n            </button>\n            </form>\n        </header>\n        <ul>\n        {movies.length > 0 &&\n            movies.map(({ id, title, poster_path }) => (\n            \n                <li key={id} id={id}>\n                <Link\n                    to={{\n                    pathname: `/movies/${`${id}`}`,\n                    state: {\n                        from: {\n                        location,\n                        },\n                    },\n                    }}\n                >\n                    <p>{title}</p>\n                </Link>\n                </li>\n            \n            ))}\n        </ul>\n    </>\n);\n};"],"names":["Movies","useState","movieToFind","setMovieToFind","movies","setMovies","location","useLocation","history","useNavigate","useEffect","searchString","URLSearchParams","search","get","getMovies","searchMovies","results","length","Notiflix","handleSubmit","e","preventDefault","query","trim","className","style","onSubmit","onChange","target","value","type","autoComplete","autoFocus","placeholder","map","id","title","poster_path","to","pathname","state","from"],"sourceRoot":""}